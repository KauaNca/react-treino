REACT TREINO

TEMA: PROPS -> mecanismo para passar dados de um componente pai para um filho. √â semelhante as v√°ri√°res que se
passa para uma fun√ß√£o.

Leitura apenas(imut√°veis), ou seja, n√£o pode ser alterado
Podem ser qualquer tipo de dado ‚Äì Strings, n√∫meros, arrays, objetos, fun√ß√µes e at√© outros componentes React.
Comunica√ß√£o entre componentes ‚Äì Permite que componentes pais enviem informa√ß√µes para componentes filhos.

Exemplos importantes

** Valida√ß√£o de Props com PropTypes
import PropTypes from "prop-types";

function User({ name, age }) {
  return (
    <div>
      {name} ({age} anos)
    </div>
  );
}

User.propTypes = {
  name: PropTypes.string.isRequired,
  age: PropTypes.number,
};

**Propaga√ß√£o de Props com Spread (...props)

function Input({ label, ...props }) {
  return (
    <div>
      <label>{label}</label>
      <input {...props} /> {/* Repassa todas as props para o input */}
    </div>
  );
}

// Uso
<Input label="Nome" type="text" placeholder="Digite seu nome" />

** Passando eventos

function BotaoFilho({ onClick }) {
  return <button onClick={onClick}>Clique</button>;
}

function Pai() {
  const handleClick = () => {
    alert("O bot√£o foi clicado!");
  };

  return <BotaoFilho onClick={handleClick} />;
}

** Children
O uso de children no React tem um diferencial poderoso: ele permite que 
voc√™ passe conte√∫do diretamente dentro do componente (como se fossem "tags aninhadas" em HTML), 
tornando os componentes mais flex√≠veis e reutiliz√°veis.

function Box({ children, corFundo }) {
  return (
    <div style={{ backgroundColor: corFundo, padding: "20px" }}>
      {children} {/* Conte√∫do inserido aqui! */}
    </div>
  );
}

// Uso:
<Box corFundo="lightblue">
  <h2>Isso √© uma caixa!</h2>
  <p>Com conte√∫do din√¢mico.</p>
</Box>

üöÄ Quando usar children?
Sempre que o componente for um "container" (ex.: cards, modais, layouts).
Para componentes gen√©ricos que precisam encapsular outros elementos.
Quando o conte√∫do √© vari√°vel ou complexo (evita m√∫ltiplas props).
